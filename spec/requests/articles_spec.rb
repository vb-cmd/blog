require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/articles', type: :request do
  let!(:user) { create(:user) }
  let(:article) { create(:article, user: user) }
  let(:valid_article) { build(:article, user: user) }
  let(:invalid_article) { build(:invalid_article, user: user) }
  let(:valid_attributes) do
    { title: Faker::Lorem.sentence, body: Faker::Lorem.paragraph, published: Faker::Boolean.boolean }
  end
  let(:invalid_attributes) { { title: nil, body: nil, published: nil } }

  before(:each) do
    post user_session_url, params: { user: { email: user.email, password: user.password } }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get articles_path
      expect(response).to have_http_status(:success)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get article_url(article)
      expect(response).to have_http_status(:success)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_article_url
      expect(response).to have_http_status(:success)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      get edit_article_url(article)
      expect(response).to have_http_status(:success)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      let(:last_article) { Article.last }
      it 'creates a new Article' do
        expect do
          post articles_url,
               params: { article: valid_attributes }
        end.to change(Article, :count).by(1)
      end

      it 'redirects to the created article' do
        post articles_url, params: { article: valid_attributes }
        expect(response).to redirect_to(article_url(last_article))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Article' do
        expect do
          post articles_url, params: { article: invalid_attributes }
        end.to change(Article, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post articles_url, params: { article: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:valid_title_attribute) do
        {
          title: Faker::Lorem.sentence
        }
      end

      let(:invalid_title_attribute) do
        {
          title: nil
        }
      end

      it 'updates the requested article' do
        patch article_url(article), params: { article: valid_title_attribute }
        article.reload
        expect(article.title).to eq(valid_title_attribute[:title])
      end

      it 'redirects to the article' do
        patch article_url(article), params: { article: valid_title_attribute }
        article.reload
        expect(response).to redirect_to(article_url(article))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch article_url(article), params: { article: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested article' do
      delete article_url(article)

      expect(Article.count).to eq(0)
    end

    it 'redirects to the articles list' do
      delete article_url(article)
      expect(response).to redirect_to(articles_url)
    end
  end
end
